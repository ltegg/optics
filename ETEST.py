# %% 
# ETEST.py
#
# Read a STDOUT file generated by WIEN2k, and plot convergence criteria.
# 
# This script is called as part of ETEST.sh, a bash shell script.

# ################
# ETEST.py
# ################
#
# by Levi Tegg, 18 July 2017 (version 0.2)
#
# A Python 3.5 script to read a STDOUT file generated by WIEN2k, and plot 
# convergence criteria.
# 
# This script is called as part of ETEST.sh, a bash shell script.

# %% Import Libraries
import numpy as np # to do data manipulation
import matplotlib.plyplot as pl # to plot things
import datetime # to get date and time later
from scipy.optimize import curve_fit # to fit ETEST
# Set the default math font to be the default font, and use Arial-like fonts
pl.rcParams.update({
                    'font.family':['Helvetica','Arial','Liberation Sans'], # use these fonts, in order of preference
                    'mathtext.default':'regular', # use regular text instead of latex mathtext
                    }) 

# %% Import and parse data
# Scan the ETEST.txt file made from grep in ETEST.sh
data=np.loadtxt('ETEST.txt',comments='#',unpack='true')

# Cycle values are every third value in ETEST.txt, starting from the 0th value
cycle=(data[0::3])

# ETEST values are every third value in ETEST.txt, starting from the 1st value
Etest=(data[1::3])

# CTEST values are every third value in ETEST.txt, starting from the 2nd value
Ctest=(data[2::3])

# %% Function-fitting for ETEST
# Define the functional form of ETEST
def fit(x,m,b):
    return 10**((m * x) + b)

# Specify a fine grid over which to interpolate ETEST
cyclefine = np.linspace(4,len(cycle)+1,num=len(cycle)*100)

# Fit the coefficients of fit to match ETEST
Efitcoefficient, dummy = curve_fit(fit, cycle[2:], Etest[2:])

# Calculate the fitted curve
Efit = fit(cyclefine, Efitcoefficient[0], Efitcoefficient[1])


# %% Make plots
# Make plot of ETEST
pl.figure()
pl.plot(cycle,Etest,label='ETEST')

# If there are enough values, plot the trend line, and predict end cycle
if len(cycle) > 6:
    pl.plot(cyclefine, Efit, color='b', ls='--',label='Fit')

## Make plot of CTEST (currently disabled)
#pl.plot(cycle,Ctest,label='CTEST')

# Add Etest convergence to plot
pl.axhline(0.0001,label='Convergence',ls='-',color='k',linewidth=1.5)

# Plot options
pl.xlabel('Cycles')
pl.ylabel('ETEST (log)')
pl.yscale('log') # log scale on y axis
pl.grid('on') # grid on
pl.legend(loc='best') # add legend, location best

# Find date and time, add that to title of plot
date=datetime.datetime.now().strftime('%Y/%m/%d at %H:%M') # make string of date and time
pl.title('%s: %i cycles completed' % (date,cycle[-1])) # title is date, plus last integer in cycle array

# Put in the fitted equation as an overlay
pl.text(5, 3E-4, '$Fit: y = {0:=3.2f} \cdot 10^x + {1:=3.2f} $'.format(10**Efitcoefficient[0],10**Efitcoefficient[1]))

# Save the figure
pl.savefig('ETEST.png') # save as ETEST.png