#!/usr/bin/env python3
#
# ################
# optics.py
# ################
#
# by Levi Tegg, 09 Nov 2017 (version 0.3)
#
# A python 3.5 script to convert the *.epsilon file generated by WIEN2k's OPTIC
# into graphs and .csvs.
# 
# Parses *.epsilon files in the present working directory (pwd), into energy
# (eV), and eps1/eps2 for each direction in the *.epsilon file.
#
# From eps1/eps2, optical constants are calculated for each direction, then
# re-saved as a .csv (for analysis) and .dat (for use in MNPBEM14). Plots of 
# each optical constant are also saved.
#
# This is a re-write/port of the MATLAB script optical_constants_xx.m, written
# by me, which was based on prior scripts optical_constants.m, interpolation.m 
# and Chromaticity Template CIELAB 1976.xls, by Vicki Keast and others.

print('Starting dos.py...')


# %% Import relevant libraries
import numpy as np # to do mathematics
import matplotlib.pyplot as pl # to make graphs
import glob # to search the pwd for *.epsilon files
pl.rcParams.update({'mathtext.default':'regular'}) # always use default font as mathtext


# %% Set some script parameters
figext = '.png' # file format/extension of the saved figures, eg .png, .pdf, .eps


# %% Find and parse data
print(' - Parsing *.dos*ev files.................',end="") #print string, but don't linebreak

# Search the pwd for a file ending in .epsilon, then sort the list
# This assumes that there is only one case file in the pwd!
dosfile = sorted(glob.glob('*.dos*ev'))

# %% For each file found, parse into 'the arrays'
# A loop counter
loopincrement = 0

# For each of the files found...
for file in dosfile:
    # Get the row that describes the DOS case
    headerloop = np.genfromtxt(fname=file,dtype=str,max_rows=1,comments='!',skip_header=2,unpack=True)
    # Make header this a 'nicely' shaped array
    headerloop = np.array([headerloop[1:]])
    # Get the DOS data from the rest of the file
    dataloop  = np.loadtxt(file,skiprows=3)
    # If we're looking at the first file...
    if loopincrement == 0:
        # Then initialise the header and data arrays using the loop values
        header = headerloop
        data = dataloop
    # Otherwise...
    else:
        # Append the loop values to the 'end' of the main arrays. 
        # Exclude the 'Energy' column using the [:,1:] trickery
        header = np.concatenate((header,headerloop[:,1:]),axis=1)
        data = np.concatenate((data,dataloop[:,1:]),axis=1)
    #Add one to the loop
    loopincrement = loopincrement + 1

# Assume the first column is energy in eV
EeV = data[:,0]

print('Done!')

# %% Make a plot DOS around EF
# Make a figure
pl.figure(figsize=(8,5))

# Plot the DOS for each column in the data array
for i in np.arange(1,np.shape(data)[1],1): # for the number of DOS in the file
    # If we're looking at the first non-energy column...
    if i == 1:
        # Use slightly different formatting
        pl.plot(EeV,data[:,i],label=str(header[:,i])[2:-2],color='k',lw=1.0) # plot the total DOS differently to the rest
    else:
        pl.plot(EeV,data[:,i],label=str(header[:,i])[2:-2],lw=0.8,alpha=0.8) # plot the total DOS differently to the rest
    

# Axis labels, text labels
pl.xlabel('Energy, E-$E_F$ (eV)',fontsize=14)
pl.ylabel('Density of States (1/eV)',fontsize=14)

# Add a zero line
pl.axvline(0,color='k')

# Set x=axis limits and ticks
xlims = [-10, 10]
pl.xlim(xlims)
pl.xticks(np.arange(-10,11,1))

# Some trickery to get the y-axis right:
# Find the indicies in EeV which are inside the xlims defined above
maxindicies = [i for i in range(len(EeV)) if EeV[i] > xlims[0] and EeV[i] < xlims[1]]
# Find the maximum value from the total DOS in this energy range. 
# This SHOULD be the absolute maximum value.
ymax= max(data[maxindicies,1])
# Set the ylims from 0, to this maximum
pl.ylim(0, int(1.2*ymax))

# Add a legend outside the axis to the right.
pl.legend(loc = 'center left',bbox_to_anchor=(1,0.5),fontsize=10)

# Save the figure. Assume that the name of the dosfile[0] is the name of the case.
pl.savefig(dosfile[0][0:-7]+'_DOS-EF'+figext,bbox_inches='tight',dpi=400)

# %% Make a plot DOS across the full energy range
# Make a figure
pl.figure(figsize=(8,5))

# Plot the DOS for each column in the data array
for i in np.arange(1,np.shape(data)[1],1): # for the number of DOS in the file
    # If we're looking at the first non-energy column...   
    if i == 1:
        # Use slightly different formatting
        pl.plot(EeV,data[:,i],label=str(header[:,i])[2:-2],color='k',lw=1.0) # plot the total DOS differently to the rest
    # Otherwise...
    else:
        # Plot each of the DOS. The label comes from the 'header' file.
        pl.plot(EeV,data[:,i],label=str(header[:,i])[2:-2],lw=0.8,alpha=0.8) # plot the total DOS differently to the rest
 

# Axis labels, text labels
pl.xlabel('Energy, E-$E_F$ (eV)',fontsize=14)
pl.ylabel('Density of States (1/eV)',fontsize=14)

# Add a zero line
pl.axvline(0,color='k')

# Add a legend outside the axis to the right.
pl.legend(loc = 'center left',bbox_to_anchor=(1,0.5),fontsize=10)

# Save the figure. Assume that the name of the dosfile[0] is the name of the case.
pl.savefig(dosfile[0][0:-7]+'_DOS-full'+figext,bbox_inches='tight',dpi=400)

# %% Make a .csv of the DOS data
# Construct the array
csv=np.append(header,data,axis=0)
# Save to disc
np.savetxt(dosfile[0][0:-7]+'_DOS.csv',csv,fmt='%s',delimiter=',')







